
robot_bluetooth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000be0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000be0  00000c74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000012e  00800064  00800064  00000c78  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000001bf  00000000  00000000  00000cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006fd  00000000  00000000  00000e77  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000320  00000000  00000000  00001574  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000837  00000000  00000000  00001894  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001b0  00000000  00000000  000020cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002a8  00000000  00000000  0000227c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000525  00000000  00000000  00002524  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ee       	ldi	r30, 0xE0	; 224
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	11 e0       	ldi	r17, 0x01	; 1
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 39       	cpi	r26, 0x92	; 146
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 bd 01 	call	0x37a	; 0x37a <main>
  8a:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <serial_init>:
volatile int8_t UQEnd;


void serial_init(uint16_t baudrate)
{
uint16_t ubrrvalue = ((F_CPU+(baudrate*8L))/(baudrate*16L)-1);
  92:	9c 01       	movw	r18, r24
  94:	40 e0       	ldi	r20, 0x00	; 0
  96:	50 e0       	ldi	r21, 0x00	; 0
  98:	ca 01       	movw	r24, r20
  9a:	b9 01       	movw	r22, r18
  9c:	60 58       	subi	r22, 0x80	; 128
  9e:	7b 47       	sbci	r23, 0x7B	; 123
  a0:	81 4e       	sbci	r24, 0xE1	; 225
  a2:	9f 4f       	sbci	r25, 0xFF	; 255
  a4:	f3 e0       	ldi	r31, 0x03	; 3
  a6:	66 0f       	add	r22, r22
  a8:	77 1f       	adc	r23, r23
  aa:	88 1f       	adc	r24, r24
  ac:	99 1f       	adc	r25, r25
  ae:	fa 95       	dec	r31
  b0:	d1 f7       	brne	.-12     	; 0xa6 <serial_init+0x14>
  b2:	e4 e0       	ldi	r30, 0x04	; 4
  b4:	22 0f       	add	r18, r18
  b6:	33 1f       	adc	r19, r19
  b8:	44 1f       	adc	r20, r20
  ba:	55 1f       	adc	r21, r21
  bc:	ea 95       	dec	r30
  be:	d1 f7       	brne	.-12     	; 0xb4 <serial_init+0x22>
  c0:	0e 94 c6 04 	call	0x98c	; 0x98c <__udivmodsi4>
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	30 40       	sbci	r19, 0x00	; 0
	
	
	
	UQFront=UQEnd=-1;
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	80 93 65 00 	sts	0x0065, r24
  ce:	80 91 65 00 	lds	r24, 0x0065
  d2:	80 93 64 00 	sts	0x0064, r24

	
	UBRRH=(unsigned char)(ubrrvalue>>8);
  d6:	30 bd       	out	0x20, r19	; 32
	UBRRL=(unsigned char)ubrrvalue;
  d8:	29 b9       	out	0x09, r18	; 9
	UCSRC=(1<<URSEL)|(3<<UCSZ0);
  da:	86 e8       	ldi	r24, 0x86	; 134
  dc:	80 bd       	out	0x20, r24	; 32
	UCSRB=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
  de:	88 e9       	ldi	r24, 0x98	; 152
  e0:	8a b9       	out	0x0a, r24	; 10
	sei();
  e2:	78 94       	sei

}
  e4:	08 95       	ret

000000e6 <serial_finit>:

void serial_finit(uint16_t baudrate,uint8_t xtal)
{
  e6:	ef 92       	push	r14
  e8:	ff 92       	push	r15
  ea:	0f 93       	push	r16
  ec:	1f 93       	push	r17
  ee:	26 2f       	mov	r18, r22
uint16_t ubrrvalue = (((xtal*1000000)+(baudrate*8L))/(baudrate*16L)-1);
  f0:	7c 01       	movw	r14, r24
  f2:	00 e0       	ldi	r16, 0x00	; 0
  f4:	10 e0       	ldi	r17, 0x00	; 0
  f6:	30 e0       	ldi	r19, 0x00	; 0
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	50 e0       	ldi	r21, 0x00	; 0
  fc:	ca 01       	movw	r24, r20
  fe:	b9 01       	movw	r22, r18
 100:	28 e4       	ldi	r18, 0x48	; 72
 102:	38 ee       	ldi	r19, 0xE8	; 232
 104:	41 e0       	ldi	r20, 0x01	; 1
 106:	50 e0       	ldi	r21, 0x00	; 0
 108:	0e 94 a7 04 	call	0x94e	; 0x94e <__mulsi3>
 10c:	6e 0d       	add	r22, r14
 10e:	7f 1d       	adc	r23, r15
 110:	80 1f       	adc	r24, r16
 112:	91 1f       	adc	r25, r17
 114:	b3 e0       	ldi	r27, 0x03	; 3
 116:	66 0f       	add	r22, r22
 118:	77 1f       	adc	r23, r23
 11a:	88 1f       	adc	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	ba 95       	dec	r27
 120:	d1 f7       	brne	.-12     	; 0x116 <serial_finit+0x30>
 122:	a4 e0       	ldi	r26, 0x04	; 4
 124:	ee 0c       	add	r14, r14
 126:	ff 1c       	adc	r15, r15
 128:	00 1f       	adc	r16, r16
 12a:	11 1f       	adc	r17, r17
 12c:	aa 95       	dec	r26
 12e:	d1 f7       	brne	.-12     	; 0x124 <serial_finit+0x3e>
 130:	a8 01       	movw	r20, r16
 132:	97 01       	movw	r18, r14
 134:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <__divmodsi4>
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	30 40       	sbci	r19, 0x00	; 0
	
	UQFront=UQEnd=-1;
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	80 93 65 00 	sts	0x0065, r24
 142:	80 91 65 00 	lds	r24, 0x0065
 146:	80 93 64 00 	sts	0x0064, r24

	
	UBRRH=(unsigned char)(ubrrvalue>>8);
 14a:	30 bd       	out	0x20, r19	; 32
	UBRRL=(unsigned char)ubrrvalue;
 14c:	29 b9       	out	0x09, r18	; 9
	UCSRC=(1<<URSEL)|(3<<UCSZ0);
 14e:	86 e8       	ldi	r24, 0x86	; 134
 150:	80 bd       	out	0x20, r24	; 32
	UCSRB=(1<<RXCIE)|(1<<RXEN)|(1<<TXEN);
 152:	88 e9       	ldi	r24, 0x98	; 152
 154:	8a b9       	out	0x0a, r24	; 10
	sei();
 156:	78 94       	sei

}
 158:	1f 91       	pop	r17
 15a:	0f 91       	pop	r16
 15c:	ff 90       	pop	r15
 15e:	ef 90       	pop	r14
 160:	08 95       	ret

00000162 <serial_read>:
unsigned char serial_read()
{
	char data;
	
	
	if(UQFront==-1)
 162:	80 91 64 00 	lds	r24, 0x0064
 166:	8f 3f       	cpi	r24, 0xFF	; 255
 168:	11 f4       	brne	.+4      	; 0x16e <serial_read+0xc>
 16a:	e0 e0       	ldi	r30, 0x00	; 0
 16c:	1d c0       	rjmp	.+58     	; 0x1a8 <serial_read+0x46>
		return 0;
	
	data=URBuff[UQFront];
 16e:	e0 91 64 00 	lds	r30, 0x0064
 172:	ff 27       	eor	r31, r31
 174:	e7 fd       	sbrc	r30, 7
 176:	f0 95       	com	r31
 178:	ea 59       	subi	r30, 0x9A	; 154
 17a:	ff 4f       	sbci	r31, 0xFF	; 255
 17c:	e0 81       	ld	r30, Z
	
	if(UQFront==UQEnd)
 17e:	90 91 64 00 	lds	r25, 0x0064
 182:	80 91 65 00 	lds	r24, 0x0065
 186:	98 17       	cp	r25, r24
 188:	41 f4       	brne	.+16     	; 0x19a <serial_read+0x38>
	{
	
	UQFront=UQEnd=-1;
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	80 93 65 00 	sts	0x0065, r24
 190:	80 91 65 00 	lds	r24, 0x0065
 194:	80 93 64 00 	sts	0x0064, r24
 198:	07 c0       	rjmp	.+14     	; 0x1a8 <serial_read+0x46>
	}
	else
	{
		UQFront++;
 19a:	80 91 64 00 	lds	r24, 0x0064
 19e:	8f 5f       	subi	r24, 0xFF	; 255
 1a0:	80 93 64 00 	sts	0x0064, r24

		if(UQFront==RECEIVE_BUFF_SIZE)
 1a4:	80 91 64 00 	lds	r24, 0x0064
		UQFront=0;
	}

	return data;
}
 1a8:	8e 2f       	mov	r24, r30
 1aa:	08 95       	ret

000001ac <serial_char>:

void serial_char(char data)
{
	
	while(!(UCSRA & (1<<UDRE)));
 1ac:	5d 9b       	sbis	0x0b, 5	; 11
 1ae:	fe cf       	rjmp	.-4      	; 0x1ac <serial_char>

	
	UDR=data;
 1b0:	8c b9       	out	0x0c, r24	; 12
}
 1b2:	08 95       	ret

000001b4 <serial_string>:
}



void serial_string(char *str)
{
 1b4:	fc 01       	movw	r30, r24
 1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <serial_string+0xc>
}

void serial_char(char data)
{
	
	while(!(UCSRA & (1<<UDRE)));
 1b8:	5d 9b       	sbis	0x0b, 5	; 11
 1ba:	fe cf       	rjmp	.-4      	; 0x1b8 <serial_string+0x4>

	
	UDR=data;
 1bc:	8c b9       	out	0x0c, r24	; 12
void serial_string(char *str)
{
	while((*str)!='\0')
	{
		serial_char(*str);
		str++;
 1be:	31 96       	adiw	r30, 0x01	; 1



void serial_string(char *str)
{
	while((*str)!='\0')
 1c0:	80 81       	ld	r24, Z
 1c2:	88 23       	and	r24, r24
 1c4:	c9 f7       	brne	.-14     	; 0x1b8 <serial_string+0x4>
	{
		serial_char(*str);
		str++;
	}
}
 1c6:	08 95       	ret

000001c8 <serial_string_P>:


void serial_string_P(const char *progmem_s)
{
 1c8:	03 c0       	rjmp	.+6      	; 0x1d0 <serial_string_P+0x8>
}

void serial_char(char data)
{
	
	while(!(UCSRA & (1<<UDRE)));
 1ca:	5d 9b       	sbis	0x0b, 5	; 11
 1cc:	fe cf       	rjmp	.-4      	; 0x1ca <serial_string_P+0x2>

	
	UDR=data;
 1ce:	2c b9       	out	0x0c, r18	; 12
 1d0:	fc 01       	movw	r30, r24

register char c;

	
	
	while ( (c = pgm_read_byte(progmem_s++))!='\0' ) {
 1d2:	01 96       	adiw	r24, 0x01	; 1
 1d4:	24 91       	lpm	r18, Z+
 1d6:	22 23       	and	r18, r18
 1d8:	c1 f7       	brne	.-16     	; 0x1ca <serial_string_P+0x2>
       serial_char(c);
		//progmem_s++;
    }
	
}
 1da:	08 95       	ret

000001dc <s_readbuffer>:


void s_readbuffer(void *buff,uint16_t len)
{
 1dc:	ef 92       	push	r14
 1de:	ff 92       	push	r15
 1e0:	0f 93       	push	r16
 1e2:	1f 93       	push	r17
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	7c 01       	movw	r14, r24
 1ea:	8b 01       	movw	r16, r22
 1ec:	c0 e0       	ldi	r28, 0x00	; 0
 1ee:	d0 e0       	ldi	r29, 0x00	; 0
 1f0:	07 c0       	rjmp	.+14     	; 0x200 <s_readbuffer+0x24>
	uint16_t i;
	for(i=0;i<len;i++)
	{
		((char*)buff)[i]=serial_read();
 1f2:	0e 94 b1 00 	call	0x162	; 0x162 <serial_read>
 1f6:	f7 01       	movw	r30, r14
 1f8:	ec 0f       	add	r30, r28
 1fa:	fd 1f       	adc	r31, r29
 1fc:	80 83       	st	Z, r24


void s_readbuffer(void *buff,uint16_t len)
{
	uint16_t i;
	for(i=0;i<len;i++)
 1fe:	21 96       	adiw	r28, 0x01	; 1
 200:	c0 17       	cp	r28, r16
 202:	d1 07       	cpc	r29, r17
 204:	b0 f3       	brcs	.-20     	; 0x1f2 <s_readbuffer+0x16>
	{
		((char*)buff)[i]=serial_read();
	}
}
 206:	df 91       	pop	r29
 208:	cf 91       	pop	r28
 20a:	1f 91       	pop	r17
 20c:	0f 91       	pop	r16
 20e:	ff 90       	pop	r15
 210:	ef 90       	pop	r14
 212:	08 95       	ret

00000214 <serial_available>:

uint8_t serial_available()
{
	if(UQFront==-1) return 0;
 214:	80 91 64 00 	lds	r24, 0x0064
 218:	8f 3f       	cpi	r24, 0xFF	; 255
 21a:	11 f4       	brne	.+4      	; 0x220 <serial_available+0xc>
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	1a c0       	rjmp	.+52     	; 0x254 <serial_available+0x40>
	if(UQFront<UQEnd)
 220:	90 91 64 00 	lds	r25, 0x0064
 224:	80 91 65 00 	lds	r24, 0x0065
 228:	98 17       	cp	r25, r24
 22a:	34 f4       	brge	.+12     	; 0x238 <serial_available+0x24>
		return(UQEnd-UQFront+1);
 22c:	90 91 65 00 	lds	r25, 0x0065
 230:	80 91 64 00 	lds	r24, 0x0064
 234:	9f 5f       	subi	r25, 0xFF	; 255
 236:	0d c0       	rjmp	.+26     	; 0x252 <serial_available+0x3e>
	else if(UQFront>UQEnd)
 238:	90 91 64 00 	lds	r25, 0x0064
 23c:	80 91 65 00 	lds	r24, 0x0065
 240:	89 17       	cp	r24, r25
 242:	14 f0       	brlt	.+4      	; 0x248 <serial_available+0x34>
 244:	91 e0       	ldi	r25, 0x01	; 1
 246:	06 c0       	rjmp	.+12     	; 0x254 <serial_available+0x40>
		return (RECEIVE_BUFF_SIZE-UQFront+UQEnd+1);
 248:	90 91 65 00 	lds	r25, 0x0065
 24c:	80 91 64 00 	lds	r24, 0x0064
 250:	93 5d       	subi	r25, 0xD3	; 211
 252:	98 1b       	sub	r25, r24
	else
		return 1;
}
 254:	89 2f       	mov	r24, r25
 256:	08 95       	ret

00000258 <s_clearbuffer>:




void s_clearbuffer()
{
 258:	02 c0       	rjmp	.+4      	; 0x25e <s_clearbuffer+0x6>
	while(serial_available()>0)
	{
		serial_read();
 25a:	0e 94 b1 00 	call	0x162	; 0x162 <serial_read>



void s_clearbuffer()
{
	while(serial_available()>0)
 25e:	0e 94 0a 01 	call	0x214	; 0x214 <serial_available>
 262:	88 23       	and	r24, r24
 264:	d1 f7       	brne	.-12     	; 0x25a <s_clearbuffer+0x2>
	{
		serial_read();
	}
}
 266:	08 95       	ret

00000268 <serial_nreadw>:




char serial_nreadw(char *msg,unsigned char length)
{
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	ec 01       	movw	r28, r24
 270:	16 2f       	mov	r17, r22

   while(serial_available()<length);		
 272:	0e 94 0a 01 	call	0x214	; 0x214 <serial_available>
 276:	81 17       	cp	r24, r17
 278:	e0 f3       	brcs	.-8      	; 0x272 <serial_nreadw+0xa>
	s_readbuffer(msg,length);
 27a:	ce 01       	movw	r24, r28
 27c:	61 2f       	mov	r22, r17
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	0e 94 ee 00 	call	0x1dc	; 0x1dc <s_readbuffer>
	return 1;
	
}
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	df 91       	pop	r29
 288:	cf 91       	pop	r28
 28a:	1f 91       	pop	r17
 28c:	08 95       	ret

0000028e <serial_nread>:


char serial_nread(char *msg,unsigned char length)
{
 28e:	1f 93       	push	r17
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	ec 01       	movw	r28, r24
 296:	16 2f       	mov	r17, r22

  if(serial_available()>=length)
 298:	0e 94 0a 01 	call	0x214	; 0x214 <serial_available>
 29c:	81 17       	cp	r24, r17
 29e:	38 f0       	brcs	.+14     	; 0x2ae <serial_nread+0x20>
{	
	s_readbuffer(msg,length);
 2a0:	ce 01       	movw	r24, r28
 2a2:	61 2f       	mov	r22, r17
 2a4:	70 e0       	ldi	r23, 0x00	; 0
 2a6:	0e 94 ee 00 	call	0x1dc	; 0x1dc <s_readbuffer>
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <serial_nread+0x24>
	return 1;
	
}
else{
       msg[0]='\0';
 2ae:	18 82       	st	Y, r1
 2b0:	80 e0       	ldi	r24, 0x00	; 0
	  return 0;
}


	
}
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	1f 91       	pop	r17
 2b8:	08 95       	ret

000002ba <__vector_13>:




ISR(USART_RXC_VECT)
{
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	0f 92       	push	r0
 2c2:	11 24       	eor	r1, r1
 2c4:	2f 93       	push	r18
 2c6:	3f 93       	push	r19
 2c8:	4f 93       	push	r20
 2ca:	8f 93       	push	r24
 2cc:	9f 93       	push	r25
 2ce:	ef 93       	push	r30
 2d0:	ff 93       	push	r31
	
	char data=UDR;
 2d2:	4c b1       	in	r20, 0x0c	; 12

	

	if(((UQEnd==RECEIVE_BUFF_SIZE-1) && UQFront==0) || ((UQEnd+1)==UQFront))
 2d4:	80 91 65 00 	lds	r24, 0x0065
 2d8:	80 91 65 00 	lds	r24, 0x0065
 2dc:	20 91 64 00 	lds	r18, 0x0064
 2e0:	99 27       	eor	r25, r25
 2e2:	87 fd       	sbrc	r24, 7
 2e4:	90 95       	com	r25
 2e6:	01 96       	adiw	r24, 0x01	; 1
 2e8:	33 27       	eor	r19, r19
 2ea:	27 fd       	sbrc	r18, 7
 2ec:	30 95       	com	r19
 2ee:	82 17       	cp	r24, r18
 2f0:	93 07       	cpc	r25, r19
 2f2:	39 f4       	brne	.+14     	; 0x302 <__vector_13+0x48>
	{
		
		UQFront++;
 2f4:	80 91 64 00 	lds	r24, 0x0064
 2f8:	8f 5f       	subi	r24, 0xFF	; 255
 2fa:	80 93 64 00 	sts	0x0064, r24
		if(UQFront==RECEIVE_BUFF_SIZE) UQFront=0;
 2fe:	80 91 64 00 	lds	r24, 0x0064
	}
	

	if(UQEnd==RECEIVE_BUFF_SIZE-1)
 302:	80 91 65 00 	lds	r24, 0x0065
		UQEnd=0;
	else
		UQEnd++;
 306:	80 91 65 00 	lds	r24, 0x0065
 30a:	8f 5f       	subi	r24, 0xFF	; 255
 30c:	80 93 65 00 	sts	0x0065, r24


	URBuff[UQEnd]=data;
 310:	e0 91 65 00 	lds	r30, 0x0065
 314:	ff 27       	eor	r31, r31
 316:	e7 fd       	sbrc	r30, 7
 318:	f0 95       	com	r31
 31a:	ea 59       	subi	r30, 0x9A	; 154
 31c:	ff 4f       	sbci	r31, 0xFF	; 255
 31e:	40 83       	st	Z, r20

	if(UQFront==-1) UQFront=0;
 320:	80 91 64 00 	lds	r24, 0x0064
 324:	8f 3f       	cpi	r24, 0xFF	; 255
 326:	11 f4       	brne	.+4      	; 0x32c <__vector_13+0x72>
 328:	10 92 64 00 	sts	0x0064, r1

}
 32c:	ff 91       	pop	r31
 32e:	ef 91       	pop	r30
 330:	9f 91       	pop	r25
 332:	8f 91       	pop	r24
 334:	4f 91       	pop	r20
 336:	3f 91       	pop	r19
 338:	2f 91       	pop	r18
 33a:	0f 90       	pop	r0
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	0f 90       	pop	r0
 340:	1f 90       	pop	r1
 342:	18 95       	reti

00000344 <urclear>:



void urclear()
{
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	90 e0       	ldi	r25, 0x00	; 0
   for(int i=0;i<128;i++)
   {
      URBuff[i]='\0';
 348:	fc 01       	movw	r30, r24
 34a:	ea 59       	subi	r30, 0x9A	; 154
 34c:	ff 4f       	sbci	r31, 0xFF	; 255
 34e:	10 82       	st	Z, r1



void urclear()
{
   for(int i=0;i<128;i++)
 350:	01 96       	adiw	r24, 0x01	; 1
 352:	80 38       	cpi	r24, 0x80	; 128
 354:	91 05       	cpc	r25, r1
 356:	c1 f7       	brne	.-16     	; 0x348 <urclear+0x4>
   {
      URBuff[i]='\0';
   } 

}
 358:	08 95       	ret

0000035a <adc_init>:


void adc_init()
{
    
    ADMUX = ((0<<REFS0)|(0<<REFS1)|(0<<ADLAR)); 
 35a:	17 b8       	out	0x07, r1	; 7

   
  
    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
 35c:	87 e8       	ldi	r24, 0x87	; 135
 35e:	86 b9       	out	0x06, r24	; 6
}
 360:	08 95       	ret

00000362 <adc_read>:

uint16_t adc_read(uint8_t ch)
{
   
    ch &= 0b00000111;  
    ADMUX = (ADMUX & 0xF8)|ch;    
 362:	97 b1       	in	r25, 0x07	; 7
 364:	87 70       	andi	r24, 0x07	; 7
 366:	98 7f       	andi	r25, 0xF8	; 248
 368:	89 2b       	or	r24, r25
 36a:	87 b9       	out	0x07, r24	; 7

   
  
    ADCSRA |= (1<<ADSC);
 36c:	36 9a       	sbi	0x06, 6	; 6

    // wait for conversion to complete
    // ADSC becomes '0' again
    // till then, run loop continuously
    while(ADCSRA & (1<<ADSC));
 36e:	36 99       	sbic	0x06, 6	; 6
 370:	fe cf       	rjmp	.-4      	; 0x36e <adc_read+0xc>

    return (ADC);
 372:	24 b1       	in	r18, 0x04	; 4
 374:	35 b1       	in	r19, 0x05	; 5
}
 376:	c9 01       	movw	r24, r18
 378:	08 95       	ret

0000037a <main>:


int main()	//note: for this program, 1st connect the Bluetooth setup, then the Bluetooth will blink continuously, then see the no written behind, and then pair it with your phone with the device name same as the no, enter the pin as 1234, now once paired download the app called Bluetooth Serial Controller, open it you will see buttons named DEF, go to "Preferences", then go to "Name", then give the name to the buttons, for ex Give ON to button 1 and off to the Button 2 and then,go bAck you should see the names on the button,adn then go to again Preferences,  then in Command and chnange the Button 1 and Button 2 to some alphabet like A, B resp,this A, B is the value which we want to compare with so as to give
{
	
	serial_init(9600);
 37a:	80 e8       	ldi	r24, 0x80	; 128
 37c:	95 e2       	ldi	r25, 0x25	; 37
 37e:	0e 94 49 00 	call	0x92	; 0x92 <serial_init>
	serial_select(1);
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	0e 94 34 04 	call	0x868	; 0x868 <serial_select>
	
	while (1)
	{
	char a;
	a=serial_read();	//it reads only one character,remember it
 38a:	0e 94 b1 00 	call	0x162	; 0x162 <serial_read>
	
	if(a=='A')	//this compares the value which we wrote in the command in each button,
 38e:	81 34       	cpi	r24, 0x41	; 65
 390:	79 f4       	brne	.+30     	; 0x3b0 <main+0x36>
	{
	write(portd,4,h);
 392:	84 e0       	ldi	r24, 0x04	; 4
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	64 e0       	ldi	r22, 0x04	; 4
 398:	70 e0       	ldi	r23, 0x00	; 0
 39a:	41 e0       	ldi	r20, 0x01	; 1
 39c:	50 e0       	ldi	r21, 0x00	; 0
 39e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <write>
	write(portd,5,l);
 3a2:	84 e0       	ldi	r24, 0x04	; 4
 3a4:	90 e0       	ldi	r25, 0x00	; 0
 3a6:	65 e0       	ldi	r22, 0x05	; 5
 3a8:	70 e0       	ldi	r23, 0x00	; 0
 3aa:	40 e0       	ldi	r20, 0x00	; 0
 3ac:	50 e0       	ldi	r21, 0x00	; 0
 3ae:	21 c0       	rjmp	.+66     	; 0x3f2 <main+0x78>
	
	write(portd,6,h);
	write(portd,7,l);
	}

	if(a=='B')
 3b0:	82 34       	cpi	r24, 0x42	; 66
 3b2:	79 f4       	brne	.+30     	; 0x3d2 <main+0x58>
	{
	write(portd,4,l);
 3b4:	84 e0       	ldi	r24, 0x04	; 4
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	64 e0       	ldi	r22, 0x04	; 4
 3ba:	70 e0       	ldi	r23, 0x00	; 0
 3bc:	40 e0       	ldi	r20, 0x00	; 0
 3be:	50 e0       	ldi	r21, 0x00	; 0
 3c0:	0e 94 f7 02 	call	0x5ee	; 0x5ee <write>
	write(portd,5,h);
 3c4:	84 e0       	ldi	r24, 0x04	; 4
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	65 e0       	ldi	r22, 0x05	; 5
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	41 e0       	ldi	r20, 0x01	; 1
 3ce:	50 e0       	ldi	r21, 0x00	; 0
 3d0:	29 c0       	rjmp	.+82     	; 0x424 <main+0xaa>
	write(portd,6,l);
	write(portd,7,h);
	
	}
	
	if(a=='C')
 3d2:	83 34       	cpi	r24, 0x43	; 67
 3d4:	b9 f4       	brne	.+46     	; 0x404 <main+0x8a>
	{
	write(portd,4,l);
 3d6:	84 e0       	ldi	r24, 0x04	; 4
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	64 e0       	ldi	r22, 0x04	; 4
 3dc:	70 e0       	ldi	r23, 0x00	; 0
 3de:	40 e0       	ldi	r20, 0x00	; 0
 3e0:	50 e0       	ldi	r21, 0x00	; 0
 3e2:	0e 94 f7 02 	call	0x5ee	; 0x5ee <write>
	write(portd,5,h);
 3e6:	84 e0       	ldi	r24, 0x04	; 4
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	65 e0       	ldi	r22, 0x05	; 5
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	41 e0       	ldi	r20, 0x01	; 1
 3f0:	50 e0       	ldi	r21, 0x00	; 0
 3f2:	0e 94 f7 02 	call	0x5ee	; 0x5ee <write>
	write(portd,6,h);
 3f6:	84 e0       	ldi	r24, 0x04	; 4
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	66 e0       	ldi	r22, 0x06	; 6
 3fc:	70 e0       	ldi	r23, 0x00	; 0
 3fe:	41 e0       	ldi	r20, 0x01	; 1
 400:	50 e0       	ldi	r21, 0x00	; 0
 402:	3a c0       	rjmp	.+116    	; 0x478 <main+0xfe>
	write(portd,7,l);
	
	}
	
		if(a=='D')
 404:	84 34       	cpi	r24, 0x44	; 68
 406:	f9 f4       	brne	.+62     	; 0x446 <main+0xcc>
	{
	write(portd,4,h);
 408:	84 e0       	ldi	r24, 0x04	; 4
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	64 e0       	ldi	r22, 0x04	; 4
 40e:	70 e0       	ldi	r23, 0x00	; 0
 410:	41 e0       	ldi	r20, 0x01	; 1
 412:	50 e0       	ldi	r21, 0x00	; 0
 414:	0e 94 f7 02 	call	0x5ee	; 0x5ee <write>
	write(portd,5,l);
 418:	84 e0       	ldi	r24, 0x04	; 4
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	65 e0       	ldi	r22, 0x05	; 5
 41e:	70 e0       	ldi	r23, 0x00	; 0
 420:	40 e0       	ldi	r20, 0x00	; 0
 422:	50 e0       	ldi	r21, 0x00	; 0
 424:	0e 94 f7 02 	call	0x5ee	; 0x5ee <write>
	write(portd,6,l);
 428:	84 e0       	ldi	r24, 0x04	; 4
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	66 e0       	ldi	r22, 0x06	; 6
 42e:	70 e0       	ldi	r23, 0x00	; 0
 430:	40 e0       	ldi	r20, 0x00	; 0
 432:	50 e0       	ldi	r21, 0x00	; 0
 434:	0e 94 f7 02 	call	0x5ee	; 0x5ee <write>
	write(portd,7,h);
 438:	84 e0       	ldi	r24, 0x04	; 4
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	67 e0       	ldi	r22, 0x07	; 7
 43e:	70 e0       	ldi	r23, 0x00	; 0
 440:	41 e0       	ldi	r20, 0x01	; 1
 442:	50 e0       	ldi	r21, 0x00	; 0
 444:	21 c0       	rjmp	.+66     	; 0x488 <main+0x10e>
	
	}
		if(a=='E')
 446:	85 34       	cpi	r24, 0x45	; 69
 448:	09 f0       	breq	.+2      	; 0x44c <main+0xd2>
 44a:	9f cf       	rjmp	.-194    	; 0x38a <main+0x10>
	{
	write(portd,4,l);
 44c:	84 e0       	ldi	r24, 0x04	; 4
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	64 e0       	ldi	r22, 0x04	; 4
 452:	70 e0       	ldi	r23, 0x00	; 0
 454:	40 e0       	ldi	r20, 0x00	; 0
 456:	50 e0       	ldi	r21, 0x00	; 0
 458:	0e 94 f7 02 	call	0x5ee	; 0x5ee <write>
	write(portd,5,l);
 45c:	84 e0       	ldi	r24, 0x04	; 4
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	65 e0       	ldi	r22, 0x05	; 5
 462:	70 e0       	ldi	r23, 0x00	; 0
 464:	40 e0       	ldi	r20, 0x00	; 0
 466:	50 e0       	ldi	r21, 0x00	; 0
 468:	0e 94 f7 02 	call	0x5ee	; 0x5ee <write>
	write(portd,6,l);
 46c:	84 e0       	ldi	r24, 0x04	; 4
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	66 e0       	ldi	r22, 0x06	; 6
 472:	70 e0       	ldi	r23, 0x00	; 0
 474:	40 e0       	ldi	r20, 0x00	; 0
 476:	50 e0       	ldi	r21, 0x00	; 0
 478:	0e 94 f7 02 	call	0x5ee	; 0x5ee <write>
	write(portd,7,l);
 47c:	84 e0       	ldi	r24, 0x04	; 4
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	67 e0       	ldi	r22, 0x07	; 7
 482:	70 e0       	ldi	r23, 0x00	; 0
 484:	40 e0       	ldi	r20, 0x00	; 0
 486:	50 e0       	ldi	r21, 0x00	; 0
 488:	0e 94 f7 02 	call	0x5ee	; 0x5ee <write>
 48c:	7e cf       	rjmp	.-260    	; 0x38a <main+0x10>

0000048e <serial_num>:
 ltoa( num , buffer, 10);
    serial_string(buffer);
}

void serial_num(int num)
{
 48e:	0f 93       	push	r16
 490:	1f 93       	push	r17
 492:	df 93       	push	r29
 494:	cf 93       	push	r28
 496:	cd b7       	in	r28, 0x3d	; 61
 498:	de b7       	in	r29, 0x3e	; 62
 49a:	27 97       	sbiw	r28, 0x07	; 7
 49c:	0f b6       	in	r0, 0x3f	; 63
 49e:	f8 94       	cli
 4a0:	de bf       	out	0x3e, r29	; 62
 4a2:	0f be       	out	0x3f, r0	; 63
 4a4:	cd bf       	out	0x3d, r28	; 61
	char buffer[7];

 itoa( num , buffer, 10);
 4a6:	8e 01       	movw	r16, r28
 4a8:	0f 5f       	subi	r16, 0xFF	; 255
 4aa:	1f 4f       	sbci	r17, 0xFF	; 255
 4ac:	b8 01       	movw	r22, r16
 4ae:	4a e0       	ldi	r20, 0x0A	; 10
 4b0:	50 e0       	ldi	r21, 0x00	; 0
 4b2:	0e 94 6d 05 	call	0xada	; 0xada <itoa>
    serial_string(buffer);
 4b6:	c8 01       	movw	r24, r16
 4b8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <serial_string>
}
 4bc:	27 96       	adiw	r28, 0x07	; 7
 4be:	0f b6       	in	r0, 0x3f	; 63
 4c0:	f8 94       	cli
 4c2:	de bf       	out	0x3e, r29	; 62
 4c4:	0f be       	out	0x3f, r0	; 63
 4c6:	cd bf       	out	0x3d, r28	; 61
 4c8:	cf 91       	pop	r28
 4ca:	df 91       	pop	r29
 4cc:	1f 91       	pop	r17
 4ce:	0f 91       	pop	r16
 4d0:	08 95       	ret

000004d2 <serial_numl>:
}



void serial_numl(long num)
{
 4d2:	0f 93       	push	r16
 4d4:	1f 93       	push	r17
 4d6:	df 93       	push	r29
 4d8:	cf 93       	push	r28
 4da:	cd b7       	in	r28, 0x3d	; 61
 4dc:	de b7       	in	r29, 0x3e	; 62
 4de:	27 97       	sbiw	r28, 0x07	; 7
 4e0:	0f b6       	in	r0, 0x3f	; 63
 4e2:	f8 94       	cli
 4e4:	de bf       	out	0x3e, r29	; 62
 4e6:	0f be       	out	0x3f, r0	; 63
 4e8:	cd bf       	out	0x3d, r28	; 61
	char buffer[7];

 ltoa( num , buffer, 10);
 4ea:	8e 01       	movw	r16, r28
 4ec:	0f 5f       	subi	r16, 0xFF	; 255
 4ee:	1f 4f       	sbci	r17, 0xFF	; 255
 4f0:	a8 01       	movw	r20, r16
 4f2:	2a e0       	ldi	r18, 0x0A	; 10
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	0e 94 8e 05 	call	0xb1c	; 0xb1c <ltoa>
    serial_string(buffer);
 4fa:	c8 01       	movw	r24, r16
 4fc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <serial_string>
}
 500:	27 96       	adiw	r28, 0x07	; 7
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	f8 94       	cli
 506:	de bf       	out	0x3e, r29	; 62
 508:	0f be       	out	0x3f, r0	; 63
 50a:	cd bf       	out	0x3d, r28	; 61
 50c:	cf 91       	pop	r28
 50e:	df 91       	pop	r29
 510:	1f 91       	pop	r17
 512:	0f 91       	pop	r16
 514:	08 95       	ret

00000516 <read>:
 516:	82 30       	cpi	r24, 0x02	; 2
 518:	f9 f0       	breq	.+62     	; 0x558 <read+0x42>
 51a:	83 30       	cpi	r24, 0x03	; 3
 51c:	18 f4       	brcc	.+6      	; 0x524 <read+0xe>
 51e:	81 30       	cpi	r24, 0x01	; 1
 520:	31 f4       	brne	.+12     	; 0x52e <read+0x18>
 522:	07 c0       	rjmp	.+14     	; 0x532 <read+0x1c>
 524:	83 30       	cpi	r24, 0x03	; 3
 526:	59 f1       	breq	.+86     	; 0x57e <read+0x68>
 528:	84 30       	cpi	r24, 0x04	; 4
 52a:	09 f4       	brne	.+2      	; 0x52e <read+0x18>
 52c:	42 c0       	rjmp	.+132    	; 0x5b2 <read+0x9c>
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	08 95       	ret
 532:	69 30       	cpi	r22, 0x09	; 9
 534:	19 f4       	brne	.+6      	; 0x53c <read+0x26>
 536:	1a ba       	out	0x1a, r1	; 26
 538:	89 b3       	in	r24, 0x19	; 25
 53a:	08 95       	ret
 53c:	8a b3       	in	r24, 0x1a	; 26
 53e:	21 e0       	ldi	r18, 0x01	; 1
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	06 2e       	mov	r0, r22
 544:	02 c0       	rjmp	.+4      	; 0x54a <read+0x34>
 546:	22 0f       	add	r18, r18
 548:	33 1f       	adc	r19, r19
 54a:	0a 94       	dec	r0
 54c:	e2 f7       	brpl	.-8      	; 0x546 <read+0x30>
 54e:	20 95       	com	r18
 550:	28 23       	and	r18, r24
 552:	2a bb       	out	0x1a, r18	; 26
 554:	89 b3       	in	r24, 0x19	; 25
 556:	25 c0       	rjmp	.+74     	; 0x5a2 <read+0x8c>
 558:	69 30       	cpi	r22, 0x09	; 9
 55a:	19 f4       	brne	.+6      	; 0x562 <read+0x4c>
 55c:	17 ba       	out	0x17, r1	; 23
 55e:	86 b3       	in	r24, 0x16	; 22
 560:	08 95       	ret
 562:	87 b3       	in	r24, 0x17	; 23
 564:	21 e0       	ldi	r18, 0x01	; 1
 566:	30 e0       	ldi	r19, 0x00	; 0
 568:	06 2e       	mov	r0, r22
 56a:	02 c0       	rjmp	.+4      	; 0x570 <read+0x5a>
 56c:	22 0f       	add	r18, r18
 56e:	33 1f       	adc	r19, r19
 570:	0a 94       	dec	r0
 572:	e2 f7       	brpl	.-8      	; 0x56c <read+0x56>
 574:	20 95       	com	r18
 576:	28 23       	and	r18, r24
 578:	27 bb       	out	0x17, r18	; 23
 57a:	86 b3       	in	r24, 0x16	; 22
 57c:	12 c0       	rjmp	.+36     	; 0x5a2 <read+0x8c>
 57e:	69 30       	cpi	r22, 0x09	; 9
 580:	19 f4       	brne	.+6      	; 0x588 <read+0x72>
 582:	14 ba       	out	0x14, r1	; 20
 584:	83 b3       	in	r24, 0x13	; 19
 586:	08 95       	ret
 588:	84 b3       	in	r24, 0x14	; 20
 58a:	21 e0       	ldi	r18, 0x01	; 1
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	06 2e       	mov	r0, r22
 590:	02 c0       	rjmp	.+4      	; 0x596 <read+0x80>
 592:	22 0f       	add	r18, r18
 594:	33 1f       	adc	r19, r19
 596:	0a 94       	dec	r0
 598:	e2 f7       	brpl	.-8      	; 0x592 <read+0x7c>
 59a:	20 95       	com	r18
 59c:	28 23       	and	r18, r24
 59e:	24 bb       	out	0x14, r18	; 20
 5a0:	83 b3       	in	r24, 0x13	; 19
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <read+0x94>
 5a6:	95 95       	asr	r25
 5a8:	87 95       	ror	r24
 5aa:	6a 95       	dec	r22
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <read+0x90>
 5ae:	81 70       	andi	r24, 0x01	; 1
 5b0:	08 95       	ret
 5b2:	69 30       	cpi	r22, 0x09	; 9
 5b4:	19 f4       	brne	.+6      	; 0x5bc <read+0xa6>
 5b6:	11 ba       	out	0x11, r1	; 17
 5b8:	80 b3       	in	r24, 0x10	; 16
 5ba:	08 95       	ret
 5bc:	31 b3       	in	r19, 0x11	; 17
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	06 2e       	mov	r0, r22
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <read+0xb4>
 5c6:	88 0f       	add	r24, r24
 5c8:	99 1f       	adc	r25, r25
 5ca:	0a 94       	dec	r0
 5cc:	e2 f7       	brpl	.-8      	; 0x5c6 <read+0xb0>
 5ce:	28 2f       	mov	r18, r24
 5d0:	20 95       	com	r18
 5d2:	23 23       	and	r18, r19
 5d4:	21 bb       	out	0x11, r18	; 17
 5d6:	22 b3       	in	r18, 0x12	; 18
 5d8:	82 2b       	or	r24, r18
 5da:	82 bb       	out	0x12, r24	; 18
 5dc:	80 b3       	in	r24, 0x10	; 16
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <read+0xd0>
 5e2:	95 95       	asr	r25
 5e4:	87 95       	ror	r24
 5e6:	6a 95       	dec	r22
 5e8:	e2 f7       	brpl	.-8      	; 0x5e2 <read+0xcc>
 5ea:	81 70       	andi	r24, 0x01	; 1
 5ec:	08 95       	ret

000005ee <write>:
 5ee:	82 30       	cpi	r24, 0x02	; 2
 5f0:	09 f4       	brne	.+2      	; 0x5f4 <write+0x6>
 5f2:	41 c0       	rjmp	.+130    	; 0x676 <write+0x88>
 5f4:	83 30       	cpi	r24, 0x03	; 3
 5f6:	20 f4       	brcc	.+8      	; 0x600 <write+0x12>
 5f8:	81 30       	cpi	r24, 0x01	; 1
 5fa:	09 f0       	breq	.+2      	; 0x5fe <write+0x10>
 5fc:	d7 c0       	rjmp	.+430    	; 0x7ac <write+0x1be>
 5fe:	07 c0       	rjmp	.+14     	; 0x60e <write+0x20>
 600:	83 30       	cpi	r24, 0x03	; 3
 602:	09 f4       	brne	.+2      	; 0x606 <write+0x18>
 604:	6c c0       	rjmp	.+216    	; 0x6de <write+0xf0>
 606:	84 30       	cpi	r24, 0x04	; 4
 608:	09 f0       	breq	.+2      	; 0x60c <write+0x1e>
 60a:	d0 c0       	rjmp	.+416    	; 0x7ac <write+0x1be>
 60c:	9c c0       	rjmp	.+312    	; 0x746 <write+0x158>
 60e:	6b 35       	cpi	r22, 0x5B	; 91
 610:	21 f4       	brne	.+8      	; 0x61a <write+0x2c>
 612:	8f ef       	ldi	r24, 0xFF	; 255
 614:	8a bb       	out	0x1a, r24	; 26
 616:	4b bb       	out	0x1b, r20	; 27
 618:	08 95       	ret
 61a:	44 23       	and	r20, r20
 61c:	21 f0       	breq	.+8      	; 0x626 <write+0x38>
 61e:	41 30       	cpi	r20, 0x01	; 1
 620:	09 f0       	breq	.+2      	; 0x624 <write+0x36>
 622:	c4 c0       	rjmp	.+392    	; 0x7ac <write+0x1be>
 624:	14 c0       	rjmp	.+40     	; 0x64e <write+0x60>
 626:	69 30       	cpi	r22, 0x09	; 9
 628:	21 f4       	brne	.+8      	; 0x632 <write+0x44>
 62a:	8f ef       	ldi	r24, 0xFF	; 255
 62c:	8a bb       	out	0x1a, r24	; 26
 62e:	1b ba       	out	0x1b, r1	; 27
 630:	08 95       	ret
 632:	8a b3       	in	r24, 0x1a	; 26
 634:	21 e0       	ldi	r18, 0x01	; 1
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	02 c0       	rjmp	.+4      	; 0x63e <write+0x50>
 63a:	22 0f       	add	r18, r18
 63c:	33 1f       	adc	r19, r19
 63e:	6a 95       	dec	r22
 640:	e2 f7       	brpl	.-8      	; 0x63a <write+0x4c>
 642:	82 2b       	or	r24, r18
 644:	8a bb       	out	0x1a, r24	; 26
 646:	8b b3       	in	r24, 0x1b	; 27
 648:	20 95       	com	r18
 64a:	28 23       	and	r18, r24
 64c:	12 c0       	rjmp	.+36     	; 0x672 <write+0x84>
 64e:	69 30       	cpi	r22, 0x09	; 9
 650:	21 f4       	brne	.+8      	; 0x65a <write+0x6c>
 652:	8f ef       	ldi	r24, 0xFF	; 255
 654:	8a bb       	out	0x1a, r24	; 26
 656:	8b bb       	out	0x1b, r24	; 27
 658:	08 95       	ret
 65a:	8a b3       	in	r24, 0x1a	; 26
 65c:	21 e0       	ldi	r18, 0x01	; 1
 65e:	30 e0       	ldi	r19, 0x00	; 0
 660:	02 c0       	rjmp	.+4      	; 0x666 <write+0x78>
 662:	22 0f       	add	r18, r18
 664:	33 1f       	adc	r19, r19
 666:	6a 95       	dec	r22
 668:	e2 f7       	brpl	.-8      	; 0x662 <write+0x74>
 66a:	82 2b       	or	r24, r18
 66c:	8a bb       	out	0x1a, r24	; 26
 66e:	8b b3       	in	r24, 0x1b	; 27
 670:	28 2b       	or	r18, r24
 672:	2b bb       	out	0x1b, r18	; 27
 674:	08 95       	ret
 676:	6b 35       	cpi	r22, 0x5B	; 91
 678:	21 f4       	brne	.+8      	; 0x682 <write+0x94>
 67a:	8f ef       	ldi	r24, 0xFF	; 255
 67c:	87 bb       	out	0x17, r24	; 23
 67e:	48 bb       	out	0x18, r20	; 24
 680:	08 95       	ret
 682:	44 23       	and	r20, r20
 684:	21 f0       	breq	.+8      	; 0x68e <write+0xa0>
 686:	41 30       	cpi	r20, 0x01	; 1
 688:	09 f0       	breq	.+2      	; 0x68c <write+0x9e>
 68a:	90 c0       	rjmp	.+288    	; 0x7ac <write+0x1be>
 68c:	14 c0       	rjmp	.+40     	; 0x6b6 <write+0xc8>
 68e:	69 30       	cpi	r22, 0x09	; 9
 690:	21 f4       	brne	.+8      	; 0x69a <write+0xac>
 692:	8f ef       	ldi	r24, 0xFF	; 255
 694:	87 bb       	out	0x17, r24	; 23
 696:	18 ba       	out	0x18, r1	; 24
 698:	08 95       	ret
 69a:	87 b3       	in	r24, 0x17	; 23
 69c:	21 e0       	ldi	r18, 0x01	; 1
 69e:	30 e0       	ldi	r19, 0x00	; 0
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <write+0xb8>
 6a2:	22 0f       	add	r18, r18
 6a4:	33 1f       	adc	r19, r19
 6a6:	6a 95       	dec	r22
 6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <write+0xb4>
 6aa:	82 2b       	or	r24, r18
 6ac:	87 bb       	out	0x17, r24	; 23
 6ae:	88 b3       	in	r24, 0x18	; 24
 6b0:	20 95       	com	r18
 6b2:	28 23       	and	r18, r24
 6b4:	12 c0       	rjmp	.+36     	; 0x6da <write+0xec>
 6b6:	69 30       	cpi	r22, 0x09	; 9
 6b8:	21 f4       	brne	.+8      	; 0x6c2 <write+0xd4>
 6ba:	8f ef       	ldi	r24, 0xFF	; 255
 6bc:	87 bb       	out	0x17, r24	; 23
 6be:	88 bb       	out	0x18, r24	; 24
 6c0:	08 95       	ret
 6c2:	87 b3       	in	r24, 0x17	; 23
 6c4:	21 e0       	ldi	r18, 0x01	; 1
 6c6:	30 e0       	ldi	r19, 0x00	; 0
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <write+0xe0>
 6ca:	22 0f       	add	r18, r18
 6cc:	33 1f       	adc	r19, r19
 6ce:	6a 95       	dec	r22
 6d0:	e2 f7       	brpl	.-8      	; 0x6ca <write+0xdc>
 6d2:	82 2b       	or	r24, r18
 6d4:	87 bb       	out	0x17, r24	; 23
 6d6:	88 b3       	in	r24, 0x18	; 24
 6d8:	28 2b       	or	r18, r24
 6da:	28 bb       	out	0x18, r18	; 24
 6dc:	08 95       	ret
 6de:	6b 35       	cpi	r22, 0x5B	; 91
 6e0:	21 f4       	brne	.+8      	; 0x6ea <write+0xfc>
 6e2:	8f ef       	ldi	r24, 0xFF	; 255
 6e4:	84 bb       	out	0x14, r24	; 20
 6e6:	45 bb       	out	0x15, r20	; 21
 6e8:	08 95       	ret
 6ea:	44 23       	and	r20, r20
 6ec:	21 f0       	breq	.+8      	; 0x6f6 <write+0x108>
 6ee:	41 30       	cpi	r20, 0x01	; 1
 6f0:	09 f0       	breq	.+2      	; 0x6f4 <write+0x106>
 6f2:	5c c0       	rjmp	.+184    	; 0x7ac <write+0x1be>
 6f4:	14 c0       	rjmp	.+40     	; 0x71e <write+0x130>
 6f6:	69 30       	cpi	r22, 0x09	; 9
 6f8:	21 f4       	brne	.+8      	; 0x702 <write+0x114>
 6fa:	8f ef       	ldi	r24, 0xFF	; 255
 6fc:	84 bb       	out	0x14, r24	; 20
 6fe:	15 ba       	out	0x15, r1	; 21
 700:	08 95       	ret
 702:	84 b3       	in	r24, 0x14	; 20
 704:	21 e0       	ldi	r18, 0x01	; 1
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	02 c0       	rjmp	.+4      	; 0x70e <write+0x120>
 70a:	22 0f       	add	r18, r18
 70c:	33 1f       	adc	r19, r19
 70e:	6a 95       	dec	r22
 710:	e2 f7       	brpl	.-8      	; 0x70a <write+0x11c>
 712:	82 2b       	or	r24, r18
 714:	84 bb       	out	0x14, r24	; 20
 716:	85 b3       	in	r24, 0x15	; 21
 718:	20 95       	com	r18
 71a:	28 23       	and	r18, r24
 71c:	12 c0       	rjmp	.+36     	; 0x742 <write+0x154>
 71e:	69 30       	cpi	r22, 0x09	; 9
 720:	21 f4       	brne	.+8      	; 0x72a <write+0x13c>
 722:	8f ef       	ldi	r24, 0xFF	; 255
 724:	84 bb       	out	0x14, r24	; 20
 726:	85 bb       	out	0x15, r24	; 21
 728:	08 95       	ret
 72a:	84 b3       	in	r24, 0x14	; 20
 72c:	21 e0       	ldi	r18, 0x01	; 1
 72e:	30 e0       	ldi	r19, 0x00	; 0
 730:	02 c0       	rjmp	.+4      	; 0x736 <write+0x148>
 732:	22 0f       	add	r18, r18
 734:	33 1f       	adc	r19, r19
 736:	6a 95       	dec	r22
 738:	e2 f7       	brpl	.-8      	; 0x732 <write+0x144>
 73a:	82 2b       	or	r24, r18
 73c:	84 bb       	out	0x14, r24	; 20
 73e:	85 b3       	in	r24, 0x15	; 21
 740:	28 2b       	or	r18, r24
 742:	25 bb       	out	0x15, r18	; 21
 744:	08 95       	ret
 746:	6b 35       	cpi	r22, 0x5B	; 91
 748:	21 f4       	brne	.+8      	; 0x752 <write+0x164>
 74a:	8f ef       	ldi	r24, 0xFF	; 255
 74c:	81 bb       	out	0x11, r24	; 17
 74e:	42 bb       	out	0x12, r20	; 18
 750:	08 95       	ret
 752:	44 23       	and	r20, r20
 754:	19 f0       	breq	.+6      	; 0x75c <write+0x16e>
 756:	41 30       	cpi	r20, 0x01	; 1
 758:	49 f5       	brne	.+82     	; 0x7ac <write+0x1be>
 75a:	15 c0       	rjmp	.+42     	; 0x786 <write+0x198>
 75c:	69 30       	cpi	r22, 0x09	; 9
 75e:	21 f4       	brne	.+8      	; 0x768 <write+0x17a>
 760:	8f ef       	ldi	r24, 0xFF	; 255
 762:	81 bb       	out	0x11, r24	; 17
 764:	12 ba       	out	0x12, r1	; 18
 766:	08 95       	ret
 768:	81 b3       	in	r24, 0x11	; 17
 76a:	21 e0       	ldi	r18, 0x01	; 1
 76c:	30 e0       	ldi	r19, 0x00	; 0
 76e:	02 c0       	rjmp	.+4      	; 0x774 <write+0x186>
 770:	22 0f       	add	r18, r18
 772:	33 1f       	adc	r19, r19
 774:	6a 95       	dec	r22
 776:	e2 f7       	brpl	.-8      	; 0x770 <write+0x182>
 778:	82 2b       	or	r24, r18
 77a:	81 bb       	out	0x11, r24	; 17
 77c:	82 b3       	in	r24, 0x12	; 18
 77e:	20 95       	com	r18
 780:	28 23       	and	r18, r24
 782:	22 bb       	out	0x12, r18	; 18
 784:	08 95       	ret
 786:	69 30       	cpi	r22, 0x09	; 9
 788:	21 f4       	brne	.+8      	; 0x792 <write+0x1a4>
 78a:	8f ef       	ldi	r24, 0xFF	; 255
 78c:	81 bb       	out	0x11, r24	; 17
 78e:	82 bb       	out	0x12, r24	; 18
 790:	08 95       	ret
 792:	81 b3       	in	r24, 0x11	; 17
 794:	21 e0       	ldi	r18, 0x01	; 1
 796:	30 e0       	ldi	r19, 0x00	; 0
 798:	02 c0       	rjmp	.+4      	; 0x79e <write+0x1b0>
 79a:	22 0f       	add	r18, r18
 79c:	33 1f       	adc	r19, r19
 79e:	6a 95       	dec	r22
 7a0:	e2 f7       	brpl	.-8      	; 0x79a <write+0x1ac>
 7a2:	82 2b       	or	r24, r18
 7a4:	81 bb       	out	0x11, r24	; 17
 7a6:	82 b3       	in	r24, 0x12	; 18
 7a8:	28 2b       	or	r18, r24
 7aa:	22 bb       	out	0x12, r18	; 18
 7ac:	08 95       	ret

000007ae <direction>:
 7ae:	83 30       	cpi	r24, 0x03	; 3
 7b0:	19 f1       	breq	.+70     	; 0x7f8 <direction+0x4a>
 7b2:	84 30       	cpi	r24, 0x04	; 4
 7b4:	09 f4       	brne	.+2      	; 0x7b8 <direction+0xa>
 7b6:	3c c0       	rjmp	.+120    	; 0x830 <direction+0x82>
 7b8:	82 30       	cpi	r24, 0x02	; 2
 7ba:	09 f0       	breq	.+2      	; 0x7be <direction+0x10>
 7bc:	54 c0       	rjmp	.+168    	; 0x866 <__stack+0x7>
 7be:	44 23       	and	r20, r20
 7c0:	21 f0       	breq	.+8      	; 0x7ca <direction+0x1c>
 7c2:	41 30       	cpi	r20, 0x01	; 1
 7c4:	09 f0       	breq	.+2      	; 0x7c8 <direction+0x1a>
 7c6:	4f c0       	rjmp	.+158    	; 0x866 <__stack+0x7>
 7c8:	0c c0       	rjmp	.+24     	; 0x7e2 <direction+0x34>
 7ca:	27 b3       	in	r18, 0x17	; 23
 7cc:	81 e0       	ldi	r24, 0x01	; 1
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <direction+0x28>
 7d2:	88 0f       	add	r24, r24
 7d4:	99 1f       	adc	r25, r25
 7d6:	6a 95       	dec	r22
 7d8:	e2 f7       	brpl	.-8      	; 0x7d2 <direction+0x24>
 7da:	80 95       	com	r24
 7dc:	82 23       	and	r24, r18
 7de:	87 bb       	out	0x17, r24	; 23
 7e0:	08 95       	ret
 7e2:	27 b3       	in	r18, 0x17	; 23
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	02 c0       	rjmp	.+4      	; 0x7ee <direction+0x40>
 7ea:	88 0f       	add	r24, r24
 7ec:	99 1f       	adc	r25, r25
 7ee:	6a 95       	dec	r22
 7f0:	e2 f7       	brpl	.-8      	; 0x7ea <direction+0x3c>
 7f2:	28 2b       	or	r18, r24
 7f4:	27 bb       	out	0x17, r18	; 23
 7f6:	08 95       	ret
 7f8:	44 23       	and	r20, r20
 7fa:	19 f0       	breq	.+6      	; 0x802 <direction+0x54>
 7fc:	41 30       	cpi	r20, 0x01	; 1
 7fe:	99 f5       	brne	.+102    	; 0x866 <__stack+0x7>
 800:	0c c0       	rjmp	.+24     	; 0x81a <direction+0x6c>
 802:	24 b3       	in	r18, 0x14	; 20
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	02 c0       	rjmp	.+4      	; 0x80e <direction+0x60>
 80a:	88 0f       	add	r24, r24
 80c:	99 1f       	adc	r25, r25
 80e:	6a 95       	dec	r22
 810:	e2 f7       	brpl	.-8      	; 0x80a <direction+0x5c>
 812:	80 95       	com	r24
 814:	82 23       	and	r24, r18
 816:	84 bb       	out	0x14, r24	; 20
 818:	08 95       	ret
 81a:	24 b3       	in	r18, 0x14	; 20
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	02 c0       	rjmp	.+4      	; 0x826 <direction+0x78>
 822:	88 0f       	add	r24, r24
 824:	99 1f       	adc	r25, r25
 826:	6a 95       	dec	r22
 828:	e2 f7       	brpl	.-8      	; 0x822 <direction+0x74>
 82a:	28 2b       	or	r18, r24
 82c:	24 bb       	out	0x14, r18	; 20
 82e:	08 95       	ret
 830:	44 23       	and	r20, r20
 832:	19 f0       	breq	.+6      	; 0x83a <direction+0x8c>
 834:	41 30       	cpi	r20, 0x01	; 1
 836:	b9 f4       	brne	.+46     	; 0x866 <__stack+0x7>
 838:	0c c0       	rjmp	.+24     	; 0x852 <direction+0xa4>
 83a:	21 b3       	in	r18, 0x11	; 17
 83c:	81 e0       	ldi	r24, 0x01	; 1
 83e:	90 e0       	ldi	r25, 0x00	; 0
 840:	02 c0       	rjmp	.+4      	; 0x846 <direction+0x98>
 842:	88 0f       	add	r24, r24
 844:	99 1f       	adc	r25, r25
 846:	6a 95       	dec	r22
 848:	e2 f7       	brpl	.-8      	; 0x842 <direction+0x94>
 84a:	80 95       	com	r24
 84c:	82 23       	and	r24, r18
 84e:	81 bb       	out	0x11, r24	; 17
 850:	08 95       	ret
 852:	21 b3       	in	r18, 0x11	; 17
 854:	81 e0       	ldi	r24, 0x01	; 1
 856:	90 e0       	ldi	r25, 0x00	; 0
 858:	02 c0       	rjmp	.+4      	; 0x85e <direction+0xb0>
 85a:	88 0f       	add	r24, r24
 85c:	99 1f       	adc	r25, r25
 85e:	6a 95       	dec	r22
 860:	e2 f7       	brpl	.-8      	; 0x85a <direction+0xac>
 862:	28 2b       	or	r18, r24
 864:	21 bb       	out	0x11, r18	; 17
 866:	08 95       	ret

00000868 <serial_select>:
 868:	88 23       	and	r24, r24
 86a:	21 f4       	brne	.+8      	; 0x874 <serial_select+0xc>
 86c:	81 e0       	ldi	r24, 0x01	; 1
 86e:	67 e0       	ldi	r22, 0x07	; 7
 870:	40 e0       	ldi	r20, 0x00	; 0
 872:	04 c0       	rjmp	.+8      	; 0x87c <serial_select+0x14>
 874:	81 30       	cpi	r24, 0x01	; 1
 876:	41 f4       	brne	.+16     	; 0x888 <serial_select+0x20>
 878:	67 e0       	ldi	r22, 0x07	; 7
 87a:	41 e0       	ldi	r20, 0x01	; 1
 87c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <write>
 880:	83 e0       	ldi	r24, 0x03	; 3
 882:	62 e0       	ldi	r22, 0x02	; 2
 884:	40 e0       	ldi	r20, 0x00	; 0
 886:	0a c0       	rjmp	.+20     	; 0x89c <serial_select+0x34>
 888:	82 30       	cpi	r24, 0x02	; 2
 88a:	59 f4       	brne	.+22     	; 0x8a2 <serial_select+0x3a>
 88c:	81 e0       	ldi	r24, 0x01	; 1
 88e:	67 e0       	ldi	r22, 0x07	; 7
 890:	40 e0       	ldi	r20, 0x00	; 0
 892:	0e 94 f7 02 	call	0x5ee	; 0x5ee <write>
 896:	83 e0       	ldi	r24, 0x03	; 3
 898:	62 e0       	ldi	r22, 0x02	; 2
 89a:	41 e0       	ldi	r20, 0x01	; 1
 89c:	0e 94 f7 02 	call	0x5ee	; 0x5ee <write>
 8a0:	08 95       	ret
 8a2:	83 30       	cpi	r24, 0x03	; 3
 8a4:	51 f4       	brne	.+20     	; 0x8ba <serial_select+0x52>
 8a6:	81 e0       	ldi	r24, 0x01	; 1
 8a8:	67 e0       	ldi	r22, 0x07	; 7
 8aa:	41 e0       	ldi	r20, 0x01	; 1
 8ac:	0e 94 f7 02 	call	0x5ee	; 0x5ee <write>
 8b0:	83 e0       	ldi	r24, 0x03	; 3
 8b2:	62 e0       	ldi	r22, 0x02	; 2
 8b4:	41 e0       	ldi	r20, 0x01	; 1
 8b6:	0e 94 f7 02 	call	0x5ee	; 0x5ee <write>
 8ba:	08 95       	ret

000008bc <jsonparser>:
 8bc:	ef 92       	push	r14
 8be:	ff 92       	push	r15
 8c0:	0f 93       	push	r16
 8c2:	1f 93       	push	r17
 8c4:	cf 93       	push	r28
 8c6:	df 93       	push	r29
 8c8:	ea 01       	movw	r28, r20
 8ca:	0e 94 53 05 	call	0xaa6	; 0xaa6 <strstr>
 8ce:	00 97       	sbiw	r24, 0x00	; 0
 8d0:	19 f4       	brne	.+6      	; 0x8d8 <jsonparser+0x1c>
 8d2:	20 e0       	ldi	r18, 0x00	; 0
 8d4:	30 e0       	ldi	r19, 0x00	; 0
 8d6:	1d c0       	rjmp	.+58     	; 0x912 <jsonparser+0x56>
 8d8:	01 96       	adiw	r24, 0x01	; 1
 8da:	60 e6       	ldi	r22, 0x60	; 96
 8dc:	70 e0       	ldi	r23, 0x00	; 0
 8de:	0e 94 53 05 	call	0xaa6	; 0xaa6 <strstr>
 8e2:	7c 01       	movw	r14, r24
 8e4:	83 e0       	ldi	r24, 0x03	; 3
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	e8 0e       	add	r14, r24
 8ea:	f9 1e       	adc	r15, r25
 8ec:	c7 01       	movw	r24, r14
 8ee:	62 e2       	ldi	r22, 0x22	; 34
 8f0:	70 e0       	ldi	r23, 0x00	; 0
 8f2:	0e 94 21 05 	call	0xa42	; 0xa42 <strchr>
 8f6:	8c 01       	movw	r16, r24
 8f8:	0e 19       	sub	r16, r14
 8fa:	1f 09       	sbc	r17, r15
 8fc:	ce 01       	movw	r24, r28
 8fe:	b7 01       	movw	r22, r14
 900:	a8 01       	movw	r20, r16
 902:	0e 94 44 05 	call	0xa88	; 0xa88 <strncpy>
 906:	0c 0f       	add	r16, r28
 908:	1d 1f       	adc	r17, r29
 90a:	f8 01       	movw	r30, r16
 90c:	10 82       	st	Z, r1
 90e:	21 e0       	ldi	r18, 0x01	; 1
 910:	30 e0       	ldi	r19, 0x00	; 0
 912:	c9 01       	movw	r24, r18
 914:	df 91       	pop	r29
 916:	cf 91       	pop	r28
 918:	1f 91       	pop	r17
 91a:	0f 91       	pop	r16
 91c:	ff 90       	pop	r15
 91e:	ef 90       	pop	r14
 920:	08 95       	ret

00000922 <compare>:
 922:	db 01       	movw	r26, r22
 924:	0d 90       	ld	r0, X+
 926:	00 20       	and	r0, r0
 928:	e9 f7       	brne	.-6      	; 0x924 <compare+0x2>
 92a:	11 97       	sbiw	r26, 0x01	; 1
 92c:	a6 1b       	sub	r26, r22
 92e:	b7 0b       	sbc	r27, r23
 930:	4a 2f       	mov	r20, r26
 932:	50 e0       	ldi	r21, 0x00	; 0
 934:	0e 94 2c 05 	call	0xa58	; 0xa58 <strncasecmp>
 938:	20 e0       	ldi	r18, 0x00	; 0
 93a:	30 e0       	ldi	r19, 0x00	; 0
 93c:	89 2b       	or	r24, r25
 93e:	11 f4       	brne	.+4      	; 0x944 <compare+0x22>
 940:	21 e0       	ldi	r18, 0x01	; 1
 942:	30 e0       	ldi	r19, 0x00	; 0
 944:	c9 01       	movw	r24, r18
 946:	08 95       	ret

00000948 <str_num>:
 948:	0e 94 03 05 	call	0xa06	; 0xa06 <atoi>
 94c:	08 95       	ret

0000094e <__mulsi3>:
 94e:	62 9f       	mul	r22, r18
 950:	d0 01       	movw	r26, r0
 952:	73 9f       	mul	r23, r19
 954:	f0 01       	movw	r30, r0
 956:	82 9f       	mul	r24, r18
 958:	e0 0d       	add	r30, r0
 95a:	f1 1d       	adc	r31, r1
 95c:	64 9f       	mul	r22, r20
 95e:	e0 0d       	add	r30, r0
 960:	f1 1d       	adc	r31, r1
 962:	92 9f       	mul	r25, r18
 964:	f0 0d       	add	r31, r0
 966:	83 9f       	mul	r24, r19
 968:	f0 0d       	add	r31, r0
 96a:	74 9f       	mul	r23, r20
 96c:	f0 0d       	add	r31, r0
 96e:	65 9f       	mul	r22, r21
 970:	f0 0d       	add	r31, r0
 972:	99 27       	eor	r25, r25
 974:	72 9f       	mul	r23, r18
 976:	b0 0d       	add	r27, r0
 978:	e1 1d       	adc	r30, r1
 97a:	f9 1f       	adc	r31, r25
 97c:	63 9f       	mul	r22, r19
 97e:	b0 0d       	add	r27, r0
 980:	e1 1d       	adc	r30, r1
 982:	f9 1f       	adc	r31, r25
 984:	bd 01       	movw	r22, r26
 986:	cf 01       	movw	r24, r30
 988:	11 24       	eor	r1, r1
 98a:	08 95       	ret

0000098c <__udivmodsi4>:
 98c:	a1 e2       	ldi	r26, 0x21	; 33
 98e:	1a 2e       	mov	r1, r26
 990:	aa 1b       	sub	r26, r26
 992:	bb 1b       	sub	r27, r27
 994:	fd 01       	movw	r30, r26
 996:	0d c0       	rjmp	.+26     	; 0x9b2 <__udivmodsi4_ep>

00000998 <__udivmodsi4_loop>:
 998:	aa 1f       	adc	r26, r26
 99a:	bb 1f       	adc	r27, r27
 99c:	ee 1f       	adc	r30, r30
 99e:	ff 1f       	adc	r31, r31
 9a0:	a2 17       	cp	r26, r18
 9a2:	b3 07       	cpc	r27, r19
 9a4:	e4 07       	cpc	r30, r20
 9a6:	f5 07       	cpc	r31, r21
 9a8:	20 f0       	brcs	.+8      	; 0x9b2 <__udivmodsi4_ep>
 9aa:	a2 1b       	sub	r26, r18
 9ac:	b3 0b       	sbc	r27, r19
 9ae:	e4 0b       	sbc	r30, r20
 9b0:	f5 0b       	sbc	r31, r21

000009b2 <__udivmodsi4_ep>:
 9b2:	66 1f       	adc	r22, r22
 9b4:	77 1f       	adc	r23, r23
 9b6:	88 1f       	adc	r24, r24
 9b8:	99 1f       	adc	r25, r25
 9ba:	1a 94       	dec	r1
 9bc:	69 f7       	brne	.-38     	; 0x998 <__udivmodsi4_loop>
 9be:	60 95       	com	r22
 9c0:	70 95       	com	r23
 9c2:	80 95       	com	r24
 9c4:	90 95       	com	r25
 9c6:	9b 01       	movw	r18, r22
 9c8:	ac 01       	movw	r20, r24
 9ca:	bd 01       	movw	r22, r26
 9cc:	cf 01       	movw	r24, r30
 9ce:	08 95       	ret

000009d0 <__divmodsi4>:
 9d0:	97 fb       	bst	r25, 7
 9d2:	09 2e       	mov	r0, r25
 9d4:	05 26       	eor	r0, r21
 9d6:	0e d0       	rcall	.+28     	; 0x9f4 <__divmodsi4_neg1>
 9d8:	57 fd       	sbrc	r21, 7
 9da:	04 d0       	rcall	.+8      	; 0x9e4 <__divmodsi4_neg2>
 9dc:	d7 df       	rcall	.-82     	; 0x98c <__udivmodsi4>
 9de:	0a d0       	rcall	.+20     	; 0x9f4 <__divmodsi4_neg1>
 9e0:	00 1c       	adc	r0, r0
 9e2:	38 f4       	brcc	.+14     	; 0x9f2 <__divmodsi4_exit>

000009e4 <__divmodsi4_neg2>:
 9e4:	50 95       	com	r21
 9e6:	40 95       	com	r20
 9e8:	30 95       	com	r19
 9ea:	21 95       	neg	r18
 9ec:	3f 4f       	sbci	r19, 0xFF	; 255
 9ee:	4f 4f       	sbci	r20, 0xFF	; 255
 9f0:	5f 4f       	sbci	r21, 0xFF	; 255

000009f2 <__divmodsi4_exit>:
 9f2:	08 95       	ret

000009f4 <__divmodsi4_neg1>:
 9f4:	f6 f7       	brtc	.-4      	; 0x9f2 <__divmodsi4_exit>
 9f6:	90 95       	com	r25
 9f8:	80 95       	com	r24
 9fa:	70 95       	com	r23
 9fc:	61 95       	neg	r22
 9fe:	7f 4f       	sbci	r23, 0xFF	; 255
 a00:	8f 4f       	sbci	r24, 0xFF	; 255
 a02:	9f 4f       	sbci	r25, 0xFF	; 255
 a04:	08 95       	ret

00000a06 <atoi>:
 a06:	fc 01       	movw	r30, r24
 a08:	88 27       	eor	r24, r24
 a0a:	99 27       	eor	r25, r25
 a0c:	e8 94       	clt
 a0e:	21 91       	ld	r18, Z+
 a10:	20 32       	cpi	r18, 0x20	; 32
 a12:	e9 f3       	breq	.-6      	; 0xa0e <atoi+0x8>
 a14:	29 30       	cpi	r18, 0x09	; 9
 a16:	10 f0       	brcs	.+4      	; 0xa1c <atoi+0x16>
 a18:	2e 30       	cpi	r18, 0x0E	; 14
 a1a:	c8 f3       	brcs	.-14     	; 0xa0e <atoi+0x8>
 a1c:	2b 32       	cpi	r18, 0x2B	; 43
 a1e:	41 f0       	breq	.+16     	; 0xa30 <atoi+0x2a>
 a20:	2d 32       	cpi	r18, 0x2D	; 45
 a22:	39 f4       	brne	.+14     	; 0xa32 <atoi+0x2c>
 a24:	68 94       	set
 a26:	04 c0       	rjmp	.+8      	; 0xa30 <atoi+0x2a>
 a28:	0e 94 c2 05 	call	0xb84	; 0xb84 <__mulhi_const_10>
 a2c:	82 0f       	add	r24, r18
 a2e:	91 1d       	adc	r25, r1
 a30:	21 91       	ld	r18, Z+
 a32:	20 53       	subi	r18, 0x30	; 48
 a34:	2a 30       	cpi	r18, 0x0A	; 10
 a36:	c0 f3       	brcs	.-16     	; 0xa28 <atoi+0x22>
 a38:	1e f4       	brtc	.+6      	; 0xa40 <atoi+0x3a>
 a3a:	90 95       	com	r25
 a3c:	81 95       	neg	r24
 a3e:	9f 4f       	sbci	r25, 0xFF	; 255
 a40:	08 95       	ret

00000a42 <strchr>:
 a42:	fc 01       	movw	r30, r24
 a44:	81 91       	ld	r24, Z+
 a46:	86 17       	cp	r24, r22
 a48:	21 f0       	breq	.+8      	; 0xa52 <strchr+0x10>
 a4a:	88 23       	and	r24, r24
 a4c:	d9 f7       	brne	.-10     	; 0xa44 <strchr+0x2>
 a4e:	99 27       	eor	r25, r25
 a50:	08 95       	ret
 a52:	31 97       	sbiw	r30, 0x01	; 1
 a54:	cf 01       	movw	r24, r30
 a56:	08 95       	ret

00000a58 <strncasecmp>:
 a58:	fb 01       	movw	r30, r22
 a5a:	dc 01       	movw	r26, r24
 a5c:	41 50       	subi	r20, 0x01	; 1
 a5e:	50 40       	sbci	r21, 0x00	; 0
 a60:	88 f0       	brcs	.+34     	; 0xa84 <strncasecmp+0x2c>
 a62:	8d 91       	ld	r24, X+
 a64:	81 34       	cpi	r24, 0x41	; 65
 a66:	1c f0       	brlt	.+6      	; 0xa6e <strncasecmp+0x16>
 a68:	8b 35       	cpi	r24, 0x5B	; 91
 a6a:	0c f4       	brge	.+2      	; 0xa6e <strncasecmp+0x16>
 a6c:	80 5e       	subi	r24, 0xE0	; 224
 a6e:	61 91       	ld	r22, Z+
 a70:	61 34       	cpi	r22, 0x41	; 65
 a72:	1c f0       	brlt	.+6      	; 0xa7a <strncasecmp+0x22>
 a74:	6b 35       	cpi	r22, 0x5B	; 91
 a76:	0c f4       	brge	.+2      	; 0xa7a <strncasecmp+0x22>
 a78:	60 5e       	subi	r22, 0xE0	; 224
 a7a:	86 1b       	sub	r24, r22
 a7c:	61 11       	cpse	r22, r1
 a7e:	71 f3       	breq	.-36     	; 0xa5c <strncasecmp+0x4>
 a80:	99 0b       	sbc	r25, r25
 a82:	08 95       	ret
 a84:	88 1b       	sub	r24, r24
 a86:	fc cf       	rjmp	.-8      	; 0xa80 <strncasecmp+0x28>

00000a88 <strncpy>:
 a88:	fb 01       	movw	r30, r22
 a8a:	dc 01       	movw	r26, r24
 a8c:	41 50       	subi	r20, 0x01	; 1
 a8e:	50 40       	sbci	r21, 0x00	; 0
 a90:	48 f0       	brcs	.+18     	; 0xaa4 <strncpy+0x1c>
 a92:	01 90       	ld	r0, Z+
 a94:	0d 92       	st	X+, r0
 a96:	00 20       	and	r0, r0
 a98:	c9 f7       	brne	.-14     	; 0xa8c <strncpy+0x4>
 a9a:	01 c0       	rjmp	.+2      	; 0xa9e <strncpy+0x16>
 a9c:	1d 92       	st	X+, r1
 a9e:	41 50       	subi	r20, 0x01	; 1
 aa0:	50 40       	sbci	r21, 0x00	; 0
 aa2:	e0 f7       	brcc	.-8      	; 0xa9c <strncpy+0x14>
 aa4:	08 95       	ret

00000aa6 <strstr>:
 aa6:	fb 01       	movw	r30, r22
 aa8:	51 91       	ld	r21, Z+
 aaa:	55 23       	and	r21, r21
 aac:	a9 f0       	breq	.+42     	; 0xad8 <strstr+0x32>
 aae:	bf 01       	movw	r22, r30
 ab0:	dc 01       	movw	r26, r24
 ab2:	4d 91       	ld	r20, X+
 ab4:	45 17       	cp	r20, r21
 ab6:	41 11       	cpse	r20, r1
 ab8:	e1 f7       	brne	.-8      	; 0xab2 <strstr+0xc>
 aba:	59 f4       	brne	.+22     	; 0xad2 <strstr+0x2c>
 abc:	cd 01       	movw	r24, r26
 abe:	01 90       	ld	r0, Z+
 ac0:	00 20       	and	r0, r0
 ac2:	49 f0       	breq	.+18     	; 0xad6 <strstr+0x30>
 ac4:	4d 91       	ld	r20, X+
 ac6:	40 15       	cp	r20, r0
 ac8:	41 11       	cpse	r20, r1
 aca:	c9 f3       	breq	.-14     	; 0xabe <strstr+0x18>
 acc:	fb 01       	movw	r30, r22
 ace:	41 11       	cpse	r20, r1
 ad0:	ef cf       	rjmp	.-34     	; 0xab0 <strstr+0xa>
 ad2:	81 e0       	ldi	r24, 0x01	; 1
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	01 97       	sbiw	r24, 0x01	; 1
 ad8:	08 95       	ret

00000ada <itoa>:
 ada:	fb 01       	movw	r30, r22
 adc:	9f 01       	movw	r18, r30
 ade:	e8 94       	clt
 ae0:	42 30       	cpi	r20, 0x02	; 2
 ae2:	c4 f0       	brlt	.+48     	; 0xb14 <itoa+0x3a>
 ae4:	45 32       	cpi	r20, 0x25	; 37
 ae6:	b4 f4       	brge	.+44     	; 0xb14 <itoa+0x3a>
 ae8:	4a 30       	cpi	r20, 0x0A	; 10
 aea:	29 f4       	brne	.+10     	; 0xaf6 <itoa+0x1c>
 aec:	97 fb       	bst	r25, 7
 aee:	1e f4       	brtc	.+6      	; 0xaf6 <itoa+0x1c>
 af0:	90 95       	com	r25
 af2:	81 95       	neg	r24
 af4:	9f 4f       	sbci	r25, 0xFF	; 255
 af6:	64 2f       	mov	r22, r20
 af8:	77 27       	eor	r23, r23
 afa:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__udivmodhi4>
 afe:	80 5d       	subi	r24, 0xD0	; 208
 b00:	8a 33       	cpi	r24, 0x3A	; 58
 b02:	0c f0       	brlt	.+2      	; 0xb06 <itoa+0x2c>
 b04:	89 5d       	subi	r24, 0xD9	; 217
 b06:	81 93       	st	Z+, r24
 b08:	cb 01       	movw	r24, r22
 b0a:	00 97       	sbiw	r24, 0x00	; 0
 b0c:	a1 f7       	brne	.-24     	; 0xaf6 <itoa+0x1c>
 b0e:	16 f4       	brtc	.+4      	; 0xb14 <itoa+0x3a>
 b10:	5d e2       	ldi	r21, 0x2D	; 45
 b12:	51 93       	st	Z+, r21
 b14:	10 82       	st	Z, r1
 b16:	c9 01       	movw	r24, r18
 b18:	0c 94 ca 05 	jmp	0xb94	; 0xb94 <strrev>

00000b1c <ltoa>:
 b1c:	fa 01       	movw	r30, r20
 b1e:	cf 93       	push	r28
 b20:	ff 93       	push	r31
 b22:	ef 93       	push	r30
 b24:	22 30       	cpi	r18, 0x02	; 2
 b26:	44 f1       	brlt	.+80     	; 0xb78 <ltoa+0x5c>
 b28:	25 32       	cpi	r18, 0x25	; 37
 b2a:	34 f5       	brge	.+76     	; 0xb78 <ltoa+0x5c>
 b2c:	c2 2f       	mov	r28, r18
 b2e:	e8 94       	clt
 b30:	ca 30       	cpi	r28, 0x0A	; 10
 b32:	49 f4       	brne	.+18     	; 0xb46 <ltoa+0x2a>
 b34:	97 fb       	bst	r25, 7
 b36:	3e f4       	brtc	.+14     	; 0xb46 <ltoa+0x2a>
 b38:	90 95       	com	r25
 b3a:	80 95       	com	r24
 b3c:	70 95       	com	r23
 b3e:	61 95       	neg	r22
 b40:	7f 4f       	sbci	r23, 0xFF	; 255
 b42:	8f 4f       	sbci	r24, 0xFF	; 255
 b44:	9f 4f       	sbci	r25, 0xFF	; 255
 b46:	2c 2f       	mov	r18, r28
 b48:	33 27       	eor	r19, r19
 b4a:	44 27       	eor	r20, r20
 b4c:	55 27       	eor	r21, r21
 b4e:	ff 93       	push	r31
 b50:	ef 93       	push	r30
 b52:	0e 94 c6 04 	call	0x98c	; 0x98c <__udivmodsi4>
 b56:	ef 91       	pop	r30
 b58:	ff 91       	pop	r31
 b5a:	60 5d       	subi	r22, 0xD0	; 208
 b5c:	6a 33       	cpi	r22, 0x3A	; 58
 b5e:	0c f0       	brlt	.+2      	; 0xb62 <ltoa+0x46>
 b60:	69 5d       	subi	r22, 0xD9	; 217
 b62:	61 93       	st	Z+, r22
 b64:	b9 01       	movw	r22, r18
 b66:	ca 01       	movw	r24, r20
 b68:	60 50       	subi	r22, 0x00	; 0
 b6a:	70 40       	sbci	r23, 0x00	; 0
 b6c:	80 40       	sbci	r24, 0x00	; 0
 b6e:	90 40       	sbci	r25, 0x00	; 0
 b70:	51 f7       	brne	.-44     	; 0xb46 <ltoa+0x2a>
 b72:	16 f4       	brtc	.+4      	; 0xb78 <ltoa+0x5c>
 b74:	cd e2       	ldi	r28, 0x2D	; 45
 b76:	c1 93       	st	Z+, r28
 b78:	10 82       	st	Z, r1
 b7a:	8f 91       	pop	r24
 b7c:	9f 91       	pop	r25
 b7e:	cf 91       	pop	r28
 b80:	0c 94 ca 05 	jmp	0xb94	; 0xb94 <strrev>

00000b84 <__mulhi_const_10>:
 b84:	7a e0       	ldi	r23, 0x0A	; 10
 b86:	97 9f       	mul	r25, r23
 b88:	90 2d       	mov	r25, r0
 b8a:	87 9f       	mul	r24, r23
 b8c:	80 2d       	mov	r24, r0
 b8e:	91 0d       	add	r25, r1
 b90:	11 24       	eor	r1, r1
 b92:	08 95       	ret

00000b94 <strrev>:
 b94:	dc 01       	movw	r26, r24
 b96:	fc 01       	movw	r30, r24
 b98:	67 2f       	mov	r22, r23
 b9a:	71 91       	ld	r23, Z+
 b9c:	77 23       	and	r23, r23
 b9e:	e1 f7       	brne	.-8      	; 0xb98 <strrev+0x4>
 ba0:	32 97       	sbiw	r30, 0x02	; 2
 ba2:	04 c0       	rjmp	.+8      	; 0xbac <strrev+0x18>
 ba4:	7c 91       	ld	r23, X
 ba6:	6d 93       	st	X+, r22
 ba8:	70 83       	st	Z, r23
 baa:	62 91       	ld	r22, -Z
 bac:	ae 17       	cp	r26, r30
 bae:	bf 07       	cpc	r27, r31
 bb0:	c8 f3       	brcs	.-14     	; 0xba4 <strrev+0x10>
 bb2:	08 95       	ret

00000bb4 <__udivmodhi4>:
 bb4:	aa 1b       	sub	r26, r26
 bb6:	bb 1b       	sub	r27, r27
 bb8:	51 e1       	ldi	r21, 0x11	; 17
 bba:	07 c0       	rjmp	.+14     	; 0xbca <__udivmodhi4_ep>

00000bbc <__udivmodhi4_loop>:
 bbc:	aa 1f       	adc	r26, r26
 bbe:	bb 1f       	adc	r27, r27
 bc0:	a6 17       	cp	r26, r22
 bc2:	b7 07       	cpc	r27, r23
 bc4:	10 f0       	brcs	.+4      	; 0xbca <__udivmodhi4_ep>
 bc6:	a6 1b       	sub	r26, r22
 bc8:	b7 0b       	sbc	r27, r23

00000bca <__udivmodhi4_ep>:
 bca:	88 1f       	adc	r24, r24
 bcc:	99 1f       	adc	r25, r25
 bce:	5a 95       	dec	r21
 bd0:	a9 f7       	brne	.-22     	; 0xbbc <__udivmodhi4_loop>
 bd2:	80 95       	com	r24
 bd4:	90 95       	com	r25
 bd6:	bc 01       	movw	r22, r24
 bd8:	cd 01       	movw	r24, r26
 bda:	08 95       	ret

00000bdc <_exit>:
 bdc:	f8 94       	cli

00000bde <__stop_program>:
 bde:	ff cf       	rjmp	.-2      	; 0xbde <__stop_program>
